name: "Build iOS app"

on:
  # manual trigger but change to any supported event
  # see addl: https://www.andrewhoog.com/post/how-to-build-react-native-android-app-with-github-actions/#3-run-build-workflow
  # addl comment
  workflow_dispatch:
    branches: [main]

jobs:
  build_with_signing:
    runs-on: macos-latest
    steps:
      # this was more debug as was curious what came pre-installed
      # GitHub shares this online, e.g. https://github.com/actions/runner-images/blob/macOS-12/20230224.1/images/macos/macos-12-Readme.md
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: checkout repository
        uses: actions/checkout@v3

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
          run: |
          # Crea las variables de shell que contienen las rutas a los archivos
          CERTIFICATE_cPATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # Importa el certificado y el perfil de aprovisionamiento
          desde los secretos
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # Crea un llavero temporal
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # importa el certificado al llavero
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # copia el perfil de aprovisionamiento al
          # directorio de perfiles de aprovisionamiento
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles          
      # Define un paso con el nombre 'build archive'

      ############################################
      - name: build archive
        # Ejecuta una serie de comandos en la máquina virtual.
        run: |
          #Permite compilar proyectos de Xcode pasando el esquema
          #del proyecto
          xcodebuild -scheme "inguzapp" \
          #Define la ruta donde se guardará el archivo de archivo
          #(.xcarchive) resultante.
          -archivePath $RUNNER_TEMP/inguzapp.xcarchive \
          #especifica que se debe utilizar el SDK de iOS para la compilación.
          -sdk iphoneos \
          #indica que se debe utilizar la configuración de Debug para la compilación 
          -configuration Debug \
          #Define define la plataforma de destino para la compilación
          -destination generic/platform=iOS \
          #son dos acciones que xcodebuild debe realizar.
          #Clean elimina todos los productos de compilación anteriores,
          #archive crea un archivo de la aplicación.
          clean archive          
      # Define un paso con el nombre 'export ipa'
      - name: export ipa
      # clave que permite definir variables de entorno
        env:
          #define una variable de entorno llamada EXPORT_OPTIONS_PLIST.
          #El valor se obtiene de secrets.EXPORT_OPTIONS_PLIST
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
        #ejecuta una serie de comandos en la máquina virtual
        run: |
          #define una variable de shell llamada EXPORT_OPTS_PATH
          #le asigna la ruta al archivo ExportOptions.plist en el directorio temporal de la máquina virtual 
          
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          
          #toma el valor de la variable de entorno EXPORT_OPTIONS_PLIST
          #que es una cadena codificada en base64, la decodifica y guarda
          #el resultado en el archivo especificado por 'EXPORT_OPTS_PATH'

          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH

          #utiliza xcodebuild que permite compilar proyectos de Xcode
          #exporta un archivo de la aplicación
          #Los argumentos especifican la ruta al archivo de archivo (.xcarchive)
          #la ruta al archivo de opciones de exportación
          #(ExportOptions.plist) y la ruta donde se guardará la aplicación exportada.
          
          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/iamgroot.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build          

      - name: Upload application
        #define un paso con el nombre "Upload application".
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: ${{ runner.temp }}/build/I\ am\ Groot.ipa
          # you can also archive the entire directory 
          # path: ${{ runner.temp }}/build
          retention-days: 3


